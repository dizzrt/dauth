// Code generated by protoc-gen-ellie-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-ellie-go-http v1.1.1
// - protoc             (unknown)
// source: example/example.proto

package example

import (
	context "context"
	http "github.com/dizzrt/ellie/transport/http"
	ginx "github.com/dizzrt/ellie/transport/http/ginx"
	gin "github.com/gin-gonic/gin"
	otel "go.opentelemetry.io/otel"
	trace "go.opentelemetry.io/otel/trace"
)

var _ = new(context.Context)
var _ = new(gin.Engine)
var _ = new(ginx.Ginx)
var _ = new(http.Server)
var _ = otel.Tracer
var _ = new(trace.Span)

const TRACER_NAME = "github.com/dizzrt/dauth/api/gen/example"
const OperationExampleHello = "/Example/Hello"

type ExampleHTTPServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterExampleHTTPServer(hs *http.Server, srv ExampleHTTPServer) {
	r := hs.Engine()
	r.GET("/example/hello/:name", _Example_Hello_0_HTTP_Handler(hs, srv))
}
func _Example_Hello_0_HTTP_Handler(hs *http.Server, srv ExampleHTTPServer) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		var req HelloRequest
		if err := ginx.DecodeRequest(ctx, &req); err != nil {
			ctx.JSON(http.StatusBadRequest, hs.WrapHTTPResponse(nil, err))
			ctx.Abort()
			return
		}

		sctx := ctx.Request.Context()
		tracer := otel.Tracer(TRACER_NAME)
		sctx, span := tracer.Start(sctx, "_Example_Hello_0_HTTP_Handler",
			trace.WithSpanKind(trace.SpanKindServer),
			trace.WithAttributes(),
		)
		defer span.End()

		res, err := srv.Hello(sctx, &req)
		ctx.Request = ctx.Request.WithContext(sctx)
		if err != nil {
			ctx.JSON(http.HTTPStatusCodeFromError(err), hs.WrapHTTPResponse(res, err))
			ctx.Abort()
			return
		}

		hs.EncodeResponse(ctx, res, err)
	}
}
